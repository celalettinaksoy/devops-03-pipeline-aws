// Pipeline genelinde kullanÄ±lacak 'docker_image' deÄŸiÅŸkenini tanÄ±mlÄ±yoruz.
def docker_image

pipeline {
    // Pipeline'Ä±n Ã§alÄ±ÅŸacaÄŸÄ± Jenkins agent'Ä±nÄ± etiketine gÃ¶re seÃ§iyoruz.
    agent {
        label 'Jenkins-Agent'
    }
    // Pipeline'da kullanÄ±lacak araÃ§larÄ± (Maven, JDK) tanÄ±mlÄ±yoruz.
    tools {
        maven 'Maven3'
        jdk 'Java21'
    }
    // Pipeline boyunca geÃ§erli olacak ortam deÄŸiÅŸkenlerini ayarlÄ±yoruz.
    environment {
        APP_NAME = "devops-03-pipeline-aws"
        RELEASE = "1.0"
        DOCKER_USER = "floryos"
        DOCKER_LOGIN = "dockerhub-token"
        DOCKER_IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        DOCKER_IMAGE_TAG = "${RELEASE}.${BUILD_NUMBER}"
    }
    stages {
        // 1. KODU GITHUB'DAN Ã‡EKME: Projenin en gÃ¼ncel kodunu 'main' branch'inden Ã§eker.
        stage('SCM GitHub') {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: SCM GitHub âœ…'
                        echo '=================================================='
                    """
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/celalettinaksoy/devops-03-pipeline-aws']])
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: SCM GitHub ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 2. MAVEN BUILD: Projeyi Maven kullanarak derler ve paketler (jar/war dosyasÄ± oluÅŸturur).
        stage('Build Maven') {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Build Maven âœ…'
                        echo '=================================================='
                    """
                    sh "mvn clean install"
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Build Maven ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 3. MAVEN TEST: Koddaki birim testlerini (unit tests) Ã§alÄ±ÅŸtÄ±rÄ±r.
        stage('Test Maven') {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Test Maven âœ…'
                        echo '=================================================='
                    """
                    sh "mvn test"
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Test Maven ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 4. SONARQUBE ANALÄ°ZÄ°: Kod kalitesini ve olasÄ± hatalarÄ± analiz etmek iÃ§in SonarQube'a gÃ¶nderir.
        stage("SonarQube Analysis") {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: SonarQube Analysis âœ…'
                        echo '=================================================='
                    """
                    withSonarQubeEnv(credentialsId: 'jenkins-sonar-token') {
                        if (isUnix()) {
                            sh "mvn sonar:sonar"
                        } else {
                            bat 'mvn sonar:sonar'
                        }
                    }
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: SonarQube Analysis ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 5. KALÄ°TE KONTROLÃœ (QUALITY GATE): SonarQube analiz sonuÃ§larÄ±nÄ±n belirlenen standartlara uyup uymadÄ±ÄŸÄ±nÄ± kontrol eder.
        stage("Quality Gate") {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Quality Gate âœ…'
                        echo '=================================================='
                    """
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonar-token'
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Quality Gate ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 6. DOCKER IMAGE OLUÅžTURMA: UygulamanÄ±n Docker imajÄ±nÄ± build eder.
        stage('Docker Image Build') {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Docker Image Build âœ…'
                        echo '=================================================='
                    """
                    docker_image = docker.build("${DOCKER_IMAGE_NAME}")
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Docker Image Build ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 7. DOCKERHUB'A PUSH'LAMA: OluÅŸturulan imajÄ± DockerHub'a (veya baÅŸka bir registry'ye) gÃ¶nderir.
        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Push Docker Image to DockerHub âœ…'
                        echo '=================================================='
                    """
                    docker.withRegistry('', DOCKER_LOGIN) {
                        docker_image.push("${DOCKER_IMAGE_TAG}")
                        docker_image.push("latest")
                    }
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Push Docker Image to DockerHub ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 8. GÃœVENLÄ°K TARAMASI (TRIVY): Docker imajÄ±ndaki bilinen gÃ¼venlik zafiyetlerini tarar.
        stage("Trivy Image Scan") {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Trivy Image Scan âœ…'
                        echo '=================================================='
                    """
                    if (isUnix()) {
                        sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image floryos/devops-03-pipeline-aws:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
                    } else {
                        bat ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image floryos/devops-03-pipeline-aws:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
                    }
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Trivy Image Scan ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }
        // 9. AGENT TEMÄ°ZLÄ°ÄžÄ°: Jenkins Agent Ã¼zerinde biriken eski ve gereksiz Docker imajlarÄ±nÄ± silerek yer aÃ§ar.
        stage('Cleanup Docker Images') {
            steps {
                script {
                    sh """
                        echo '=================================================='
                        echo '     STAGE BAÅžLIYOR: Cleanup Docker Images âœ…'
                        echo '=================================================='
                    """
                    if (isUnix()) {
                        sh """
                            # Bu repo iÃ§in tÃ¼m imageâ€™leri al, tarihe gÃ¶re sÄ±rala, son 3 hariÃ§ sil
                            docker images "${env.DOCKER_IMAGE_NAME}" --format "{{.Repository}}:{{.Tag}} {{.CreatedAt}}" \\
                            | sort -r -k2 \\
                            | tail -n +4 \\
                            | awk '{print \$1}' \\
                            | xargs -r docker rmi -f

                            # TÃ¼m <none> (dangling) imajlarÄ± temizle
                            docker image prune -f
                        """
                    } else {
                        bat """
                            rem Bu repo iÃ§in eski imajlarÄ± sil
                            for /f "skip=3 tokens=1" %%i in ('docker images ${env.DOCKER_IMAGE_NAME} --format "{{.Repository}}:{{.Tag}}" ^| sort') do docker rmi -f %%i

                            rem TÃ¼m <none> (dangling) imajlarÄ± temizle
                            docker image prune -f
                        """
                    }
                    sh """
                        echo '=================================================='
                        echo '     STAGE TAMAMLANDI: Cleanup Docker Images ðŸŽ‰'
                        echo '=================================================='
                    """
                }
            }
        }

        // --- OPSÄ°YONEL: DEPLOY AÅžAMASI (ÅžU ANDA PASÄ°F) ---
        /*
        stage('Deploy Kubernetes') {
            steps {
                script {
                    kubernetesDeploy (configs: 'deployment-service.yaml', kubeconfigId: 'kubernetes')
                }
            }
        }

        stage('Docker Image to Clean') {
            steps {
                     sh "docker image prune -f"
            }
        }
        */
    }
}